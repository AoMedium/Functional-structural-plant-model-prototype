import static light.*;
import static organs.*;

const float GOLDEN_ANGLE = 137.5;
const float BRANCH_ANGLE = 50;
const float LEAF_ANGLE = 70;
const int PHYLLOCHRON = 1;

protected void init()
[
Axiom ==> Bud(1, PHYLLOCHRON, 1);
// light source is placed
// above the scene
==>> ^ M(50) RU(180) MyLight;
]
public void run()
[
    Bud(r, p, o), (p > 0) ==> Bud(r, p-1, o);
    b:Bud(r, p, o), (r < 10 && p == 0 && o < 4) ==> if (forall(distance(b, (* Internode *)) > 0.6)) (
        RV(-0.1) Internode Node
        [ RL(BRANCH_ANGLE) Bud(r, PHYLLOCHRON, o+1) ]
        [ RL(LEAF_ANGLE) Leaf(0f) ]
        RH(GOLDEN_ANGLE) RV(-0.1) Internode Bud(r+1, PHYLLOCHRON, o)
    );

    Bud(r, p, o), (r == 10) ==> RV(-0.1) Internode RV(-0.1) Internode Flower;
]

// light model instance
// 100000: number of random rays
// 5: recursion depth (nb. of reflections)
LightModel lm = new LightModel(100000, 5);

public void grow() {
// apply growth rules
run();
// compute light
lm.compute();
// calculate the amount of light
// (integrated over the whole spectrum),
// absorbed by a leaf
absorb();
}

protected void absorb() [
lf:Leaf ::> {
// 2.25 - conversion factor W -> PAR
// (photosynthetically active radiation [mikro mol/m^2/s])
lf[al] = lm.getAbsorbedPower3d(lf).integrate() * 2.25;
//println(lf[al]);
}
]